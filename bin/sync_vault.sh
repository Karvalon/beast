#!/usr/bin/env bash
# VaultMesh Memory Sync Utility
# Generated by VaultMesh Dotfiles Management System

set -euo pipefail

# Configuration
DOTFILES_DIR="${DOTFILES_DIR:-$HOME/.dotfiles}"
MEMORY_DIR="$DOTFILES_DIR/memory"
VAULT_ADDR="${VAULT_ADDR:-http://localhost:8200}"
SYNC_TIMEOUT=30

# Logging function
log_message() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] [$level] $message"
    
    # Also log to memory if available
    if [[ -w "$MEMORY_DIR/memory.log" ]]; then
        echo "$timestamp: sync-vault [$level] $message" >> "$MEMORY_DIR/memory.log"
    fi
}

# Error handling
error_exit() {
    log_message "ERROR" "$1"
    exit 1
}

# Check dependencies
check_dependencies() {
    local missing_deps=()
    
    if ! command -v rsync &> /dev/null; then
        missing_deps+=("rsync")
    fi
    
    if ! command -v curl &> /dev/null; then
        missing_deps+=("curl")
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        error_exit "Missing dependencies: ${missing_deps[*]}. Please install them first."
    fi
}

# Vault health check
check_vault_health() {
    log_message "INFO" "Checking Vault connectivity at $VAULT_ADDR"
    
    if ! curl -s --connect-timeout "$SYNC_TIMEOUT" "$VAULT_ADDR/v1/sys/health" > /dev/null 2>&1; then
        log_message "WARN" "Vault is not accessible at $VAULT_ADDR"
        return 1
    fi
    
    log_message "INFO" "Vault connectivity confirmed"
    return 0
}

# Create backup of memory before sync
create_memory_backup() {
    local backup_dir="$MEMORY_DIR/backups"
    local backup_file="memory_backup_$(date +%Y%m%d_%H%M%S).log"
    
    mkdir -p "$backup_dir"
    
    if [[ -f "$MEMORY_DIR/memory.log" ]]; then
        cp "$MEMORY_DIR/memory.log" "$backup_dir/$backup_file"
        log_message "INFO" "Memory backup created: $backup_file"
        
        # Keep only last 10 backups
        find "$backup_dir" -name "memory_backup_*.log" -type f | sort -r | tail -n +11 | xargs rm -f
    fi
}

# Sync memory to vault location
sync_to_vault() {
    local vault_memory_path="${VAULT_MEMORY_PATH:-/vault/memory/}"
    
    # Create vault memory directory if it doesn't exist
    if [[ ! -d "$(dirname "$vault_memory_path")" ]]; then
        log_message "WARN" "Vault memory path parent directory doesn't exist, creating local fallback"
        vault_memory_path="$HOME/.vault_sync/"
        mkdir -p "$vault_memory_path"
    fi
    
    log_message "INFO" "Syncing memory to vault at $vault_memory_path"
    
    # Ensure memory directory exists
    mkdir -p "$MEMORY_DIR"
    
    # Sync with rsync
    if rsync -av --timeout="$SYNC_TIMEOUT" "$MEMORY_DIR/" "$vault_memory_path" 2>/dev/null; then
        log_message "SUCCESS" "Memory sync completed successfully"
        return 0
    else
        log_message "ERROR" "Memory sync failed"
        return 1
    fi
}

# Sync from vault to local memory
sync_from_vault() {
    local vault_memory_path="${VAULT_MEMORY_PATH:-/vault/memory/}"
    
    if [[ ! -d "$vault_memory_path" ]]; then
        log_message "WARN" "Vault memory path doesn't exist: $vault_memory_path"
        return 1
    fi
    
    log_message "INFO" "Syncing from vault to local memory"
    
    # Create backup before overwriting
    create_memory_backup
    
    # Sync from vault
    if rsync -av --timeout="$SYNC_TIMEOUT" "$vault_memory_path" "$MEMORY_DIR/" 2>/dev/null; then
        log_message "SUCCESS" "Memory sync from vault completed"
        return 0
    else
        log_message "ERROR" "Memory sync from vault failed"
        return 1
    fi
}

# Bidirectional sync (merge)
sync_bidirectional() {
    local vault_memory_path="${VAULT_MEMORY_PATH:-/vault/memory/}"
    local temp_merge_dir="/tmp/vault_memory_merge_$$"
    
    mkdir -p "$temp_merge_dir"
    
    log_message "INFO" "Performing bidirectional memory sync"
    
    # Copy local memory to temp
    cp -r "$MEMORY_DIR"/* "$temp_merge_dir/" 2>/dev/null || true
    
    # Merge vault memory if available
    if [[ -d "$vault_memory_path" ]]; then
        rsync -av "$vault_memory_path" "$temp_merge_dir/" 2>/dev/null || true
    fi
    
    # Merge memory logs if both exist
    if [[ -f "$MEMORY_DIR/memory.log" ]] && [[ -f "$vault_memory_path/memory.log" ]]; then
        log_message "INFO" "Merging memory logs"
        
        # Combine and sort by timestamp
        cat "$MEMORY_DIR/memory.log" "$vault_memory_path/memory.log" | sort | uniq > "$temp_merge_dir/memory.log"
    fi
    
    # Sync merged content back to both locations
    rsync -av "$temp_merge_dir/" "$MEMORY_DIR/" 2>/dev/null || true
    rsync -av "$temp_merge_dir/" "$vault_memory_path" 2>/dev/null || true
    
    # Cleanup
    rm -rf "$temp_merge_dir"
    
    log_message "SUCCESS" "Bidirectional sync completed"
}

# Update memory statistics
update_memory_stats() {
    local stats_file="$MEMORY_DIR/stats.json"
    local log_file="$MEMORY_DIR/memory.log"
    
    if [[ -f "$log_file" ]]; then
        local total_entries=$(wc -l < "$log_file" 2>/dev/null || echo "0")
        local last_sync=$(date)
        local file_size=$(du -h "$log_file" | cut -f1)
        
        cat > "$stats_file" << EOF
{
    "total_entries": $total_entries,
    "last_sync": "$last_sync",
    "file_size": "$file_size",
    "sync_count": $(($(grep -c "sync-vault" "$log_file" 2>/dev/null || echo "0") + 1))
}
EOF
        
        log_message "INFO" "Memory statistics updated: $total_entries entries, $file_size"
    fi
}

# Display usage information
show_usage() {
    cat << EOF
VaultMesh Memory Sync Utility

Usage: $(basename "$0") [OPTIONS] [COMMAND]

Commands:
    to-vault    Sync local memory to vault (default)
    from-vault  Sync vault memory to local
    merge       Bidirectional sync with merge
    status      Show sync status
    stats       Show memory statistics

Options:
    -h, --help     Show this help message
    -v, --verbose  Enable verbose output
    -q, --quiet    Suppress non-error output
    -t, --timeout  Set sync timeout (default: $SYNC_TIMEOUT seconds)

Environment Variables:
    VAULT_ADDR            Vault server address
    VAULT_MEMORY_PATH     Path to vault memory storage
    DOTFILES_DIR          Dotfiles directory path

Examples:
    $(basename "$0")                    # Sync to vault
    $(basename "$0") from-vault         # Sync from vault
    $(basename "$0") merge              # Bidirectional merge
    $(basename "$0") --verbose status   # Show detailed status
EOF
}

# Show sync status
show_status() {
    local vault_memory_path="${VAULT_MEMORY_PATH:-/vault/memory/}"
    
    echo "ðŸŒ‰ VaultMesh Memory Sync Status"
    echo "================================"
    echo "Local Memory: $MEMORY_DIR"
    echo "Vault Memory: $vault_memory_path"
    echo "Vault Address: $VAULT_ADDR"
    echo ""
    
    # Local memory status
    if [[ -f "$MEMORY_DIR/memory.log" ]]; then
        local entries=$(wc -l < "$MEMORY_DIR/memory.log" 2>/dev/null || echo "0")
        local size=$(du -h "$MEMORY_DIR/memory.log" 2>/dev/null | cut -f1 || echo "0")
        echo "Local Entries: $entries ($size)"
        echo "Last Local Entry: $(tail -1 "$MEMORY_DIR/memory.log" 2>/dev/null | cut -d: -f1-2 || echo "None")"
    else
        echo "Local Entries: Not found"
    fi
    
    # Vault memory status
    if [[ -f "$vault_memory_path/memory.log" ]]; then
        local vault_entries=$(wc -l < "$vault_memory_path/memory.log" 2>/dev/null || echo "0")
        local vault_size=$(du -h "$vault_memory_path/memory.log" 2>/dev/null | cut -f1 || echo "0")
        echo "Vault Entries: $vault_entries ($vault_size)"
        echo "Last Vault Entry: $(tail -1 "$vault_memory_path/memory.log" 2>/dev/null | cut -d: -f1-2 || echo "None")"
    else
        echo "Vault Entries: Not found"
    fi
    
    # Vault connectivity
    if check_vault_health; then
        echo "Vault Status: Connected"
    else
        echo "Vault Status: Disconnected"
    fi
}

# Show memory statistics
show_stats() {
    local stats_file="$MEMORY_DIR/stats.json"
    
    if [[ -f "$stats_file" ]]; then
        echo "ðŸ“Š Memory Statistics"
        echo "==================="
        cat "$stats_file" | sed 's/[{}"]//g' | sed 's/,//' | sed 's/:/: /'
    else
        echo "ðŸ“Š No statistics available. Run a sync first."
    fi
}

# Main execution
main() {
    local command="to-vault"
    local verbose=false
    local quiet=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -v|--verbose)
                verbose=true
                shift
                ;;
            -q|--quiet)
                quiet=true
                shift
                ;;
            -t|--timeout)
                SYNC_TIMEOUT="$2"
                shift 2
                ;;
            to-vault|from-vault|merge|status|stats)
                command="$1"
                shift
                ;;
            *)
                error_exit "Unknown option: $1. Use --help for usage information."
                ;;
        esac
    done
    
    # Redirect output if quiet mode
    if [[ "$quiet" == true ]]; then
        exec > /dev/null
    fi
    
    # Set verbose mode
    if [[ "$verbose" == true ]]; then
        set -x
    fi
    
    # Ensure memory directory exists
    mkdir -p "$MEMORY_DIR"
    
    # Execute command
    case "$command" in
        "to-vault")
            check_dependencies
            create_memory_backup
            sync_to_vault
            update_memory_stats
            ;;
        "from-vault")
            check_dependencies
            sync_from_vault
            update_memory_stats
            ;;
        "merge")
            check_dependencies
            sync_bidirectional
            update_memory_stats
            ;;
        "status")
            show_status
            ;;
        "stats")
            show_stats
            ;;
    esac
    
    log_message "INFO" "sync-vault operation completed: $command"
}

# Run main function with all arguments
main "$@"
