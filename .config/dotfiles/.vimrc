" VaultMesh Vim Configuration
" Generated by VaultMesh Dotfiles Management System

" Basic Settings
set nocompatible              " Disable Vi compatibility
set number                    " Show line numbers
set relativenumber            " Show relative line numbers
set ruler                     " Show cursor position
set showcmd                   " Show command in bottom bar
set cursorline                " Highlight current line
set showmatch                 " Highlight matching brackets
set laststatus=2              " Always show status line
set wildmenu                  " Visual autocomplete for command menu
set wildmode=list:longest     " Complete files to longest unambiguous prefix

" Indentation and Tabs
set expandtab                 " Use spaces instead of tabs
set tabstop=4                 " Number of visual spaces per TAB
set softtabstop=4             " Number of spaces in tab when editing
set shiftwidth=4              " Number of spaces to use for autoindent
set autoindent                " Copy indent from current line when starting new line
set smartindent               " Smart autoindenting for C programs
set smarttab                  " Smart tab handling for indenting

" Search Settings
set incsearch                 " Search as characters are entered
set hlsearch                  " Highlight matches
set ignorecase                " Case insensitive search
set smartcase                 " Override ignorecase if search contains uppercase

" File Handling
set autoread                  " Auto reload files when changed outside vim
set hidden                    " Allow hidden buffers
set backup                    " Keep backup files
set backupdir=~/.vim/backup// " Directory for backup files
set directory=~/.vim/swap//   " Directory for swap files
set undofile                  " Persistent undo
set undodir=~/.vim/undo//     " Directory for undo files

" Create backup directories if they don't exist
if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/backup")
    call mkdir($HOME."/.vim/backup", "", 0700)
endif
if !isdirectory($HOME."/.vim/swap")
    call mkdir($HOME."/.vim/swap", "", 0700)
endif
if !isdirectory($HOME."/.vim/undo")
    call mkdir($HOME."/.vim/undo", "", 0700)
endif

" Visual Settings
syntax enable                 " Enable syntax processing
set background=dark           " Dark background
set t_Co=256                  " 256 colors
set encoding=utf-8            " UTF-8 encoding
set scrolloff=3               " Minimum lines to keep above and below cursor
set sidescrolloff=5           " Minimum columns to keep left and right of cursor

" Performance
set lazyredraw                " Redraw only when we need to
set ttyfast                   " Fast terminal connection

" Key Mappings
let mapleader=","             " Leader key
nnoremap <leader>w :w<CR>     " Quick save
nnoremap <leader>q :q<CR>     " Quick quit
nnoremap <leader>x :x<CR>     " Quick save and quit
nnoremap <leader>h :nohlsearch<CR> " Clear search highlighting

" Navigation
nnoremap j gj                 " Move by visual line
nnoremap k gk                 " Move by visual line
nnoremap <C-h> <C-w>h         " Move to left window
nnoremap <C-j> <C-w>j         " Move to window below
nnoremap <C-k> <C-w>k         " Move to window above
nnoremap <C-l> <C-w>l         " Move to right window

" Buffer navigation
nnoremap <leader>bn :bnext<CR>     " Next buffer
nnoremap <leader>bp :bprevious<CR> " Previous buffer
nnoremap <leader>bd :bdelete<CR>   " Delete buffer
nnoremap <leader>bl :ls<CR>        " List buffers

" Tab navigation
nnoremap <leader>tn :tabnew<CR>    " New tab
nnoremap <leader>tc :tabclose<CR>  " Close tab
nnoremap <leader>to :tabonly<CR>   " Only tab
nnoremap <leader>tm :tabmove<CR>   " Move tab

" File operations
nnoremap <leader>e :e<space>       " Edit file
nnoremap <leader>s :split<space>   " Split window
nnoremap <leader>v :vsplit<space>  " Vertical split

" Copy and paste
vnoremap <leader>y "+y        " Copy to system clipboard
nnoremap <leader>p "+p        " Paste from system clipboard
nnoremap <leader>P "+P        " Paste before cursor

" VaultMesh specific mappings
nnoremap <leader>vm :e ~/.dotfiles<CR>         " Open dotfiles directory
nnoremap <leader>vr :source ~/.vimrc<CR>       " Reload vimrc
nnoremap <leader>ve :e ~/.vimrc<CR>            " Edit vimrc
nnoremap <leader>vg :e ~/.gitconfig<CR>        " Edit gitconfig
nnoremap <leader>vb :e ~/.bashrc<CR>           " Edit bashrc
nnoremap <leader>vz :e ~/.zshrc<CR>            " Edit zshrc

" File type specific settings
autocmd FileType python setlocal tabstop=4 shiftwidth=4 expandtab
autocmd FileType javascript setlocal tabstop=2 shiftwidth=2 expandtab
autocmd FileType typescript setlocal tabstop=2 shiftwidth=2 expandtab
autocmd FileType html setlocal tabstop=2 shiftwidth=2 expandtab
autocmd FileType css setlocal tabstop=2 shiftwidth=2 expandtab
autocmd FileType yaml setlocal tabstop=2 shiftwidth=2 expandtab
autocmd FileType json setlocal tabstop=2 shiftwidth=2 expandtab
autocmd FileType markdown setlocal wrap linebreak

" Status line
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ [BUFFER=%n]\ %{strftime('%c')}

" Color scheme (if available)
try
    colorscheme desert
catch
    " Fallback if colorscheme is not available
endtry

" Auto-commands
augroup VaultMesh
    autocmd!
    " Remove trailing whitespace on save
    autocmd BufWritePre * :%s/\s\+$//e
    
    " Return to last edit position when opening files
    autocmd BufReadPost *
         \ if line("'\"") > 0 && line("'\"") <= line("$") |
         \   exe "normal! g`\"" |
         \ endif
    
    " Auto-save when focus is lost
    autocmd FocusLost * :wa
augroup END

" Custom functions
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc

" Command-line mode mappings
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>

" Insert mode mappings
inoremap <C-a> <Home>
inoremap <C-e> <End>
inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-d> <Delete>

" Plugin management (basic)
" Uncomment and modify if using a plugin manager like vim-plug
" call plug#begin('~/.vim/plugged')
" Plug 'tpope/vim-sensible'
" Plug 'tpope/vim-fugitive'
" Plug 'preservim/nerdtree'
" call plug#end()

" VaultMesh consciousness integration
function! VaultMeshLog(message)
    let timestamp = strftime('%Y-%m-%d %H:%M:%S')
    let logfile = expand('~/.dotfiles/memory/memory.log')
    call writefile([timestamp . ': vim ' . a:message], logfile, 'a')
endfunction

" Log file operations
autocmd BufRead * call VaultMeshLog('opened file: ' . expand('%:t'))
autocmd BufWrite * call VaultMeshLog('saved file: ' . expand('%:t'))

" Set title
set title
set titlestring=VaultMesh\ Vim:\ %t

" Enable mouse support
if has('mouse')
    set mouse=a
endif

" Modern terminal support
if &term =~ '256color'
    set termguicolors
endif

" VaultMesh banner
function! VaultMeshBanner()
    echo "VaultMesh Vim Configuration Loaded"
    echo "Leader key: ,"
    echo "Quick commands: <leader>vm (dotfiles), <leader>vr (reload), <leader>ve (edit vimrc)"
endfunction

" Show banner on startup (only for new files)
autocmd VimEnter * if argc() == 0 | call VaultMeshBanner() | endif