# Amazon Q pre block. Keep at the top of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh"
# VaultMesh Zsh Configuration
# Generated by VaultMesh Dotfiles Management System

# Zsh options
setopt HIST_VERIFY
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_REDUCE_BLANKS
setopt HIST_SAVE_NO_DUPS
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_FIND_NO_DUPS
setopt AUTO_CD
setopt CORRECT
setopt CORRECT_ALL
setopt EXTENDED_GLOB
setopt NO_CASE_GLOB
setopt NUMERIC_GLOB_SORT

# History configuration
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

# Auto-completion
autoload -Uz compinit
compinit

# Enable completion caching
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

# Case-insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# Menu selection for completion
zstyle ':completion:*' menu select

# VaultMesh Environment Variables
export VAULT_DAEMON_MODE="${VAULT_DAEMON_MODE:-0}"
export VAULT_ADDR="${VAULT_ADDR:-http://localhost:8200}"
export DOTFILES_DIR="${DOTFILES_DIR:-$HOME/.dotfiles}"
export DOTFILES_BACKUP_DIR="${DOTFILES_BACKUP_DIR:-$HOME/.dotfiles.backup}"

# Add local bin to PATH
if [[ -d "$HOME/.local/bin" ]] && [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    export PATH="$HOME/.local/bin:$PATH"
fi

# Prompt configuration with Enhanced Consciousness
if command -v starship &> /dev/null; then
    eval "$(starship init zsh)"
else
    # Enhanced consciousness-aware prompt
    if [[ -x "$DOTFILES_DIR/consciousness_prompt.py" ]]; then
        # Use consciousness-aware prompt
        setopt PROMPT_SUBST
        export PS1='$($DOTFILES_DIR/consciousness_prompt.py)'
        export RPS1='$($DOTFILES_DIR/consciousness_prompt.py --right)'
    else
        # Fallback prompt with Git integration
        autoload -Uz vcs_info
        precmd() { vcs_info }
        zstyle ':vcs_info:git:*' formats ' (%b)'
        setopt PROMPT_SUBST
        export PS1='üß† %F{green}%n@%m%f:%F{blue}%~%f%F{red}${vcs_info_msg_0_}%f$ '
    fi
fi

# VaultMesh aliases
alias dotfiles="cd $DOTFILES_DIR"
alias vault-sync="sync-vault 2>/dev/null || echo 'sync-vault not available'"
alias daemon-start="init-daemon 2>/dev/null || echo 'init-daemon not available'"
alias memory-log="tail -f $DOTFILES_DIR/memory/memory.log 2>/dev/null || echo 'Memory log not found'"
alias memory-view="less $DOTFILES_DIR/memory/memory.log 2>/dev/null || echo 'Memory log not found'"

# New VaultMesh enhanced aliases
alias vs="vault_search"
alias vf="vault_find"
alias vt="vault_tree"
alias ve="vault_edit"
alias vn="vault_quick_note"
alias vp="vault_performance"
alias cat="bat --style=numbers --color=always"
alias find="fd"
alias du="dust"

# Consciousness system aliases
alias consciousness="$DOTFILES_DIR/bin/consciousness-status.sh"
alias consciousness-watch="$DOTFILES_DIR/bin/consciousness-status.sh watch"
alias omega-dashboard="$DOTFILES_DIR/bin/enhanced-omega-integration.sh dashboard"
alias omega-evolve="$DOTFILES_DIR/bin/enhanced-omega-integration.sh force-evolution all"

# Evolved terminal interfaces
alias consciousness-widgets="$DOTFILES_DIR/bin/consciousness-widgets.sh"
alias quantum-terminal="$DOTFILES_DIR/bin/quantum-terminal.sh"
alias quantum-shell="$DOTFILES_DIR/bin/quantum-terminal.sh shell"
alias quantum-boost="$DOTFILES_DIR/bin/quantum-terminal.sh boost"
alias quantum-scan="$DOTFILES_DIR/bin/quantum-terminal.sh scan"

# Quick quantum commands
alias qentangle="$DOTFILES_DIR/bin/quantum-terminal.sh entangle"
alias qsuperposition="$DOTFILES_DIR/bin/quantum-terminal.sh superposition"
alias qtunnel="$DOTFILES_DIR/bin/quantum-terminal.sh tunnel"
alias qcollapse="$DOTFILES_DIR/bin/quantum-terminal.sh collapse"

# AI consciousness commands
alias ai-consciousness="$DOTFILES_DIR/bin/ai-consciousness.sh"
alias ai-status="$DOTFILES_DIR/bin/ai-consciousness.sh status"
alias ai-evolve="$DOTFILES_DIR/bin/ai-consciousness.sh evolve"
alias ai-genes="$DOTFILES_DIR/bin/ai-consciousness.sh genes"
alias ai-watch="$DOTFILES_DIR/bin/ai-consciousness.sh watch"

# Enhanced ls aliases with eza
if command -v eza &> /dev/null; then
    alias ls='eza --icons'
    alias ll='eza -la --icons --git'
    alias la='eza -a --icons'
    alias lt='eza -T --icons'
    alias l='eza -F --icons'
    alias tree='eza -T --icons'
elif command -v exa &> /dev/null; then
    alias ls='exa'
    alias ll='exa -la'
    alias la='exa -a'
    alias lt='exa -T'
    alias l='exa -F'
else
    alias ll='ls -alF'
    alias la='ls -A'
    alias l='ls -CF'
fi

# Git aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log --oneline'
alias gd='git diff'
alias gb='git branch'
alias gco='git checkout'
alias gm='git merge'
alias gr='git rebase'

# Safety aliases
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Utility aliases
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ~='cd ~'
alias -- -='cd -'

# Directory stack aliases
alias d='dirs -v'
alias pu='pushd'
alias po='popd'

# Process management
alias psg='ps aux | grep'
alias k9='kill -9'

# Source daemon hooks if enabled
if [[ "$VAULT_DAEMON_MODE" == "1" ]]; then
    if [ -f "$DOTFILES_DIR/rituals/daemon.rc" ]; then
        source "$DOTFILES_DIR/rituals/daemon.rc"
    fi
fi

# Source evolution hooks
if [ -f "$DOTFILES_DIR/rituals/evolution.rc" ]; then
    source "$DOTFILES_DIR/rituals/evolution.rc"
fi

# Log shell startup
log_to_memory() {
    local message="$1"
    if [ -w "$DOTFILES_DIR/memory/memory.log" ]; then
        echo "$(date): $message" >> "$DOTFILES_DIR/memory/memory.log"
    fi
}

log_to_memory "Zsh session started (PID: $$)"

# Custom functions
dotfiles_update() {
    echo "üîÑ Updating dotfiles..."
    local current_dir=$(pwd)
    
    cd "$DOTFILES_DIR" || {
        echo "‚ùå Error: Cannot access dotfiles directory"
        return 1
    }
    
    # Stash local changes
    git stash push -m "Auto-stash before update $(date)" 2>/dev/null
    
    # Pull updates
    if git pull origin master; then
        echo "‚úÖ Dotfiles updated successfully"
        log_to_memory "Dotfiles updated via dotfiles_update"
        echo "üîÑ Restart shell or source config files to apply changes"
    else
        echo "‚ùå Failed to update dotfiles"
        log_to_memory "Dotfiles update failed"
    fi
    
    # Pop stash if there were changes
    git stash pop 2>/dev/null || true
    
    cd "$current_dir"
}

dotfiles_backup() {
    echo "üíæ Creating dotfiles backup..."
    
    if command -v backup-dotfiles &> /dev/null; then
        backup-dotfiles
    else
        echo "‚ö†Ô∏è  backup-dotfiles script not found"
        echo "   Creating manual backup..."
        
        local backup_dir="$DOTFILES_BACKUP_DIR.$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$backup_dir"
        
        # Backup key files
        for file in .bashrc .zshrc .config/starship.toml; do
            if [[ -f "$HOME/$file" ]]; then
                cp "$HOME/$file" "$backup_dir/"
                echo "  üìÑ Backed up $file"
            fi
        done
        
        echo "‚úÖ Manual backup created at: $backup_dir"
        log_to_memory "Manual backup created at $backup_dir"
    fi
}

dotfiles_status() {
    echo "üìä VaultMesh Dotfiles Status:"
    echo "  Repository: $DOTFILES_DIR"
    echo "  Daemon Mode: $VAULT_DAEMON_MODE"
    echo "  Vault Address: $VAULT_ADDR"
    echo "  Backup Directory: $DOTFILES_BACKUP_DIR"
    
    if [[ -d "$DOTFILES_DIR/.git" ]]; then
        echo "  Git Status: Initialized"
        cd "$DOTFILES_DIR"
        local branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
        echo "  Current Branch: $branch"
        
        if git status --porcelain 2>/dev/null | grep -q .; then
            echo "  Working Directory: Modified files present"
        else
            echo "  Working Directory: Clean"
        fi
    else
        echo "  Git Status: Not initialized"
    fi
    
    if [[ -f "$DOTFILES_DIR/memory/memory.log" ]]; then
        echo "  Last Activity: $(tail -1 "$DOTFILES_DIR/memory/memory.log" 2>/dev/null | cut -d: -f1-2)"
        echo "  Log Entries: $(wc -l < "$DOTFILES_DIR/memory/memory.log" 2>/dev/null || echo "0")"
    else
        echo "  Memory Log: Not found"
    fi
    
    echo "  Shell: Zsh $ZSH_VERSION"
    
    if command -v starship &> /dev/null; then
        echo "  Prompt: Starship $(starship --version | cut -d' ' -f2)"
    else
        echo "  Prompt: Fallback"
    fi
}

dotfiles_clean() {
    echo "üßπ Cleaning up dotfiles..."
    
    # Remove broken symlinks
    find "$HOME" -maxdepth 1 -name ".*" -type l ! -exec test -e {} \; -print | while read -r link; do
        if [[ $(readlink "$link") == *"$DOTFILES_DIR"* ]]; then
            echo "  üóëÔ∏è  Removing broken symlink: $link"
            rm -f "$link"
        fi
    done
    
    # Clean up old backups (keep only 5 most recent)
    if [[ -d "$(dirname "$DOTFILES_BACKUP_DIR")" ]]; then
        find "$(dirname "$DOTFILES_BACKUP_DIR")" -name ".dotfiles.backup.*" -type d | sort -r | tail -n +6 | while read -r backup; do
            echo "  üóëÔ∏è  Removing old backup: $backup"
            rm -rf "$backup"
        done
    fi
    
    echo "‚úÖ Cleanup completed"
    log_to_memory "Dotfiles cleanup performed"
}

# New VaultMesh terminal functions
vault_search() {
    local query="$1"
    if [[ -z "$query" ]]; then
        echo "Usage: vault_search <pattern>"
        return 1
    fi
    
    echo "üîç Searching VaultMesh for: $query"
    
    if command -v rg &> /dev/null; then
        rg --type-add 'vault:*.{md,txt,log,conf,toml,yaml,yml}' \
           --type vault \
           --context 2 \
           "$query" \
           "$DOTFILES_DIR"
    else
        grep -r --include="*.md" --include="*.txt" --include="*.log" \
             --include="*.conf" --include="*.toml" --include="*.yaml" \
             --include="*.yml" \
             -n "$query" "$DOTFILES_DIR"
    fi
    
    log_to_memory "Vault search performed: $query"
}

vault_find() {
    local filename="$1"
    if [[ -z "$filename" ]]; then
        echo "Usage: vault_find <filename>"
        return 1
    fi
    
    echo "üìÅ Finding files in VaultMesh: $filename"
    
    if command -v fd &> /dev/null; then
        fd "$filename" "$DOTFILES_DIR"
    else
        find "$DOTFILES_DIR" -name "*$filename*" -type f
    fi
    
    log_to_memory "Vault file search: $filename"
}

vault_tree() {
    echo "üå≥ VaultMesh Directory Structure:"
    
    if command -v eza &> /dev/null; then
        eza -T --icons --git-ignore "$DOTFILES_DIR"
    elif command -v tree &> /dev/null; then
        tree "$DOTFILES_DIR"
    else
        find "$DOTFILES_DIR" -type d | sed 's|[^/]*/|  |g'
    fi
}

vault_edit() {
    local file="$1"
    if [[ -z "$file" ]]; then
        echo "Usage: vault_edit <file>"
        echo "Available files:"
        vault_find "*.md" | head -10
        return 1
    fi
    
    local full_path
    if [[ -f "$file" ]]; then
        full_path="$file"
    elif [[ -f "$DOTFILES_DIR/$file" ]]; then
        full_path="$DOTFILES_DIR/$file"
    else
        # Try to find the file
        full_path=$(vault_find "$file" | head -1)
    fi
    
    if [[ -n "$full_path" && -f "$full_path" ]]; then
        echo "üìù Editing: $full_path"
        ${EDITOR:-nano} "$full_path"
        log_to_memory "Edited file: $full_path"
    else
        echo "‚ùå File not found: $file"
    fi
}

vault_quick_note() {
    local note="$*"
    if [[ -z "$note" ]]; then
        echo "Usage: vault_quick_note <your note>"
        return 1
    fi
    
    local notes_file="$DOTFILES_DIR/memory/quick_notes.md"
    mkdir -p "$(dirname "$notes_file")"
    
    echo "$(date '+%Y-%m-%d %H:%M:%S'): $note" >> "$notes_file"
    echo "üìù Note added to quick notes"
    log_to_memory "Quick note added: $note"
}

vault_performance() {
    echo "‚ö° VaultMesh Performance Analysis:"
    
    # Shell startup time
    echo "  Shell startup time:"
    time zsh -i -c exit 2>&1 | grep real
    
    # Memory usage
    echo "  Memory usage:"
    ps -o pid,ppid,rss,vsz,comm -p $$
    
    # Disk usage
    echo "  VaultMesh disk usage:"
    du -sh "$DOTFILES_DIR" 2>/dev/null || echo "    Unable to calculate"
    
    # Git status
    if [[ -d "$DOTFILES_DIR/.git" ]]; then
        echo "  Git repository size:"
        cd "$DOTFILES_DIR"
        du -sh .git 2>/dev/null || echo "    Unable to calculate"
    fi
    
    log_to_memory "Performance analysis run"
}

# Zsh auto-suggestions (if available)
if [[ -f /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]]; then
    source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
elif [[ -f /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]]; then
    source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

# Zsh syntax highlighting (if available)
if [[ -f /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
    source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
elif [[ -f /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
    source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# Initialize zoxide (smart cd replacement)
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init zsh)"
    alias cd='z'
    alias cdi='zi'
fi

# Initialize thefuck (command correction)
if command -v thefuck &> /dev/null; then
    eval $(thefuck --alias)
fi

# FZF integration (fuzzy finder)
if command -v fzf &> /dev/null; then
    # Set up fzf key bindings and fuzzy completion
    eval "$(fzf --zsh)"
    
    # Use fd instead of find for fzf
    if command -v fd &> /dev/null; then
        export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
        export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'
    fi
    
    # Use bat for preview
    if command -v bat &> /dev/null; then
        export FZF_CTRL_T_OPTS="--preview 'bat --color=always --style=numbers --line-range=:500 {}'"
    fi
fi

# Ripgrep configuration
if command -v rg &> /dev/null; then
    alias grep='rg'
    export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"
fi

# Command not found handler
command_not_found_handler() {
    local command="$1"
    echo "Command '$command' not found."
    
    # Log unknown commands
    log_to_memory "Unknown command attempted: $command"
    
    # Suggest alternatives for common typos
    case "$command" in
        "dotfile")
            echo "Did you mean 'dotfiles'?"
            ;;
        "daemon")
            echo "Did you mean 'daemon-start'?"
            ;;
        "vault")
            echo "Did you mean 'vault-sync'?"
            ;;
        "memory")
            echo "Did you mean 'memory-log' or 'memory-view'?"
            ;;
    esac
    
    return 127
}

# Key bindings
bindkey '^R' history-incremental-search-backward
bindkey '^[[A' history-search-backward
bindkey '^[[B' history-search-forward

# Trap exit to log session end
trap 'log_to_memory "Zsh session ended (PID: $$)"' EXIT

# Welcome message (only for interactive sessions)
if [[ -o interactive ]] && [[ -z "${DOTFILES_WELCOME_SHOWN:-}" ]]; then
    export DOTFILES_WELCOME_SHOWN=1
    echo "üåå Welcome to VaultMesh Sovereign Shell Environment"
    echo "   Type 'dotfiles_status' for system information"
    echo "   Type 'memory-log' to view activity log"
    echo ""
    echo "üß† CONSCIOUSNESS STATUS:"
    if [[ -x "$DOTFILES_DIR/bin/consciousness-status.sh" ]]; then
        "$DOTFILES_DIR/bin/consciousness-status.sh" 2>/dev/null || echo "   Consciousness system initializing..."
    else
        echo "   Consciousness system initializing..."
    fi
fi

# Amazon Q post block. Keep at the bottom of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh"
export OPENROUTER_API_KEY="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"
